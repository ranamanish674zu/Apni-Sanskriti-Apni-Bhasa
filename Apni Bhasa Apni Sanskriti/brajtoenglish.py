# -*- coding: utf-8 -*-
"""BrajToEnglish.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wR-Nq95NJ-KozmR6fHSFRqJr2S73dVYn
"""

from google.colab import drive
import pandas as pd
import numpy as np
import re
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.pipeline import Pipeline

!pip install openpyxl

drive.mount('/content/drive')

# Loading the dataset using the appropriate function for Excel files
data = pd.read_excel("/content/drive/MyDrive/BrajT0HinidiiiEnglish/finalDataset.xlsx", engine='openpyxl')

data.head()

data.tail()

from matplotlib import pyplot as plt
import seaborn as sns
_df_1.groupby('Braj').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['Braj'].value_counts()
    for x_label, grp in _df_2.groupby('English')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('English')
_ = plt.ylabel('Braj')

from matplotlib import pyplot as plt
import seaborn as sns
_df_0.groupby('English').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

data.info()

# Data Preprocessing and Visualization

# 1. Check for Missing Values
print("Missing values:\n", data.isnull().sum())

# 2. Explore the distribution of Braj language labels
plt.figure(figsize=(8, 6))
sns.countplot(x='Braj', data=data)
plt.title('Distribution of Braj Language Labels')
plt.xlabel('Braj Language')
plt.ylabel('Count')
plt.show()

# 3. Analyze the length of English sentences
data['English_Length'] = data['English'].apply(len)
plt.figure(figsize=(8, 6))
sns.histplot(data['English_Length'], bins=30)
plt.title('Distribution of English Sentence Lengths')
plt.xlabel('Sentence Length')
plt.ylabel('Count')
plt.show()

# 4. Explore the relationship between English sentence length and Braj language
plt.figure(figsize=(8, 6))
sns.boxplot(x='Braj', y='English_Length', data=data)
plt.title('Relationship between English Sentence Length and Braj Language')
plt.xlabel('Braj Language')
plt.ylabel('Sentence Length')
plt.show()

# Continue with the rest of the code (model training, etc.) as you had it before
X = data["English"]
y = data["Braj"]
le = LabelEncoder()
y = le.fit_transform(y)
le.classes_
data_list = []
for text in X:
    text = re.sub(r'[!@#$(),\n"%^*?\:;~`0-9]', ' ', text)
    text = re.sub(r'[[]]', ' ', text)
    text = text.lower()
    data_list.append(text)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)
# creating bag of words using countvectorizer

cv = CountVectorizer()
cv.fit(X_train)

x_train = cv.transform(X_train).toarray()
x_test  = cv.transform(X_test).toarray()
model = MultinomialNB()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

ac = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
cr = classification_report(y_test, y_pred)
print("Accuracy is :",ac)
print("Confusion Matrix is :\n",cm)
print("Classification report is :\n",cr)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Assuming you have already calculated y_pred, y_test, and other metrics

# Visualize the classification report
report = classification_report(y_test, y_pred, output_dict=True)
df_report = pd.DataFrame(report).transpose()
plt.figure(figsize=(8, 6))
sns.heatmap(df_report[['precision', 'recall', 'f1-score', 'support']], annot=True, fmt=".2f", cmap="viridis")
plt.title('Classification Report')
plt.show()

# Visualize the confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# Visualize the accuracy
accuracy = accuracy_score(y_test, y_pred)
plt.figure(figsize=(4, 2))
plt.bar(['Accuracy'], [accuracy])
plt.title('Accuracy')
plt.ylim([0, 1])
plt.show()

pipe = Pipeline([('vectorizer', cv), ('multinomialNB', model)])
pipe.fit(X_train, y_train)
y_pred2 = pipe.predict(X_test)
ac2 = accuracy_score(y_test, y_pred2)
print("Accuracy is :",ac2)
with open('trained_pipeline-0.1.0.pkl','wb') as f:
    pickle.dump(pipe, f)

text="How did you write about it"
text="Is you name manish ?"
y = pipe.predict([text])
le.classes_[y[0]], y

